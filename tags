!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Args	main.cpp	/^struct Args{$/;"	s	file:
Args::id_	main.cpp	/^	int id_;$/;"	m	struct:Args	file:	access:public
Args::runCount_	main.cpp	/^	int runCount_;$/;"	m	struct:Args	file:	access:public
Args::sendCount_	main.cpp	/^	int sendCount_;$/;"	m	struct:Args	file:	access:public
CPPFLAGS	makefile	/^CPPFLAGS =  $(addprefix -I, $(include_dirs)) $(addprefix -L,$(LDFLAGS))$/;"	m
Event	Event.h	/^class Event$/;"	c
Event::getName	Event.h	/^	const char* getName() const{$/;"	f	class:Event	access:public	signature:() const
Event::l1	Event.h	/^	level1 l1;$/;"	m	class:Event	access:public
Event::name_	Event.h	/^	char name_[32];$/;"	m	class:Event	access:private
Event::setName	Event.h	/^	void setName(const char* name){$/;"	f	class:Event	access:public	signature:(const char* name)
EventFactory	EventFactory.h	/^class EventFactory{$/;"	c
EventFactory::GetEvent	EventFactory.cpp	/^boost::shared_ptr<Event> EventFactory::GetEvent(const char* buf, int size)$/;"	f	class:EventFactory	signature:(const char* buf, int size)
EventFactory::GetEvent	EventFactory.h	/^	boost::shared_ptr<Event> GetEvent(const char*, int);$/;"	p	class:EventFactory	access:public	signature:(const char*, int)
EventFactory::create	EventFactory.h	/^	virtual boost::shared_ptr<Event> create()=0;$/;"	p	class:EventFactory	access:public	signature:()
GetEvent	EventFactory.cpp	/^boost::shared_ptr<Event> EventFactory::GetEvent(const char* buf, int size)$/;"	f	class:EventFactory	signature:(const char* buf, int size)
GetEvent	EventFactory.h	/^	boost::shared_ptr<Event> GetEvent(const char*, int);$/;"	p	class:EventFactory	access:public	signature:(const char*, int)
LDFLAGS	makefile	/^LDFLAGS := $/;"	m
LIBS	makefile	/^LIBS := boost_system pthread$/;"	m
MAXDATASIZE	main.cpp	22;"	d	file:
SERVPORT	main.cpp	21;"	d	file:
Tmain	main.cpp	/^void* Tmain(void* a)$/;"	f	signature:(void* a)
cc	makefile	/^cc = g++$/;"	m
create	EventFactory.h	/^	virtual boost::shared_ptr<Event> create()=0;$/;"	p	class:EventFactory	access:public	signature:()
echoEvent	echoEvent.h	/^struct echoEvent:public Event$/;"	s	inherits:Event
echoEvent::msg	echoEvent.h	/^	char msg[32];$/;"	m	struct:echoEvent	access:public
featureCode	CommunicationsProtocol.h	/^	char			featureCode[4];	$/;"	m	struct:level1	access:public
getName	Event.h	/^	const char* getName() const{$/;"	f	class:Event	access:public	signature:() const
id_	main.cpp	/^	int id_;$/;"	m	struct:Args	file:	access:public
include_dirs	makefile	/^include_dirs := $/;"	m
jumpCount	CommunicationsProtocol.h	/^	unsigned int	jumpCount;$/;"	m	struct:level1	access:public
l1	Event.h	/^	level1 l1;$/;"	m	class:Event	access:public
level1	CommunicationsProtocol.h	/^struct level1{$/;"	s
level1::featureCode	CommunicationsProtocol.h	/^	char			featureCode[4];	$/;"	m	struct:level1	access:public
level1::jumpCount	CommunicationsProtocol.h	/^	unsigned int	jumpCount;$/;"	m	struct:level1	access:public
level1::level2Name	CommunicationsProtocol.h	/^	char			level2Name[32];	\/\/放消息的名字$/;"	m	struct:level1	access:public
level1::level2Size	CommunicationsProtocol.h	/^	unsigned int	level2Size;$/;"	m	struct:level1	access:public
level1::missCount	CommunicationsProtocol.h	/^	unsigned int	missCount;$/;"	m	struct:level1	access:public
level1::serialNumber	CommunicationsProtocol.h	/^	unsigned long	serialNumber;$/;"	m	struct:level1	access:public
level1::sourceID	CommunicationsProtocol.h	/^	unsigned int	sourceID;$/;"	m	struct:level1	access:public
level1::targetID	CommunicationsProtocol.h	/^	unsigned int	targetID;$/;"	m	struct:level1	access:public
level2Name	CommunicationsProtocol.h	/^	char			level2Name[32];	\/\/放消息的名字$/;"	m	struct:level1	access:public
level2Size	CommunicationsProtocol.h	/^	unsigned int	level2Size;$/;"	m	struct:level1	access:public
linkFlags	makefile	/^linkFlags := -g -Wall$/;"	m
main	main.cpp	/^int main(int iA, char* pA[])$/;"	f	signature:(int iA, char* pA[])
missCount	CommunicationsProtocol.h	/^	unsigned int	missCount;$/;"	m	struct:level1	access:public
msg	echoEvent.h	/^	char msg[32];$/;"	m	struct:echoEvent	access:public
name_	Event.h	/^	char name_[32];$/;"	m	class:Event	access:private
objects	makefile	/^objects := $(patsubst %.cpp,%.o,$(wildcard *.cpp))$/;"	m
runCount_	main.cpp	/^	int runCount_;$/;"	m	struct:Args	file:	access:public
sendCount_	main.cpp	/^	int sendCount_;$/;"	m	struct:Args	file:	access:public
serialNumber	CommunicationsProtocol.h	/^	unsigned long	serialNumber;$/;"	m	struct:level1	access:public
setName	Event.h	/^	void setName(const char* name){$/;"	f	class:Event	access:public	signature:(const char* name)
sourceID	CommunicationsProtocol.h	/^	unsigned int	sourceID;$/;"	m	struct:level1	access:public
target	makefile	/^target = main$/;"	m
targetID	CommunicationsProtocol.h	/^	unsigned int	targetID;$/;"	m	struct:level1	access:public
